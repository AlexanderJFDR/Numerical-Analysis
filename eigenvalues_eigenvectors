## 1.乘幂法 power_method
import numpy as np
from numerical_analysis.eigenvalues_eigenvectors import power_method

def main():
    A = np.array([[2, 2, -2], [2, 5, -4], [-2, -4, 5]])
    lambd, feature_vector = power_method(A, 20)
    print(lambd)
    print(feature_vector)

if __name__ == '__main__':
    main()


## 2.Jacobi方法 jacobi_method
import numpy as np
from numerical_analysis.eigenvalues_eigenvectors import power_method, jacobi_method

def main():
    A = np.array([[1, 1, 0.5], [1, 1, 0.25], [0.5, 0.25, 2]])
    lambd, feature_vector = jacobi_method(A)
    print(lambd)
    print(feature_vector)

if __name__ == '__main__':
    main()


## 3.Givens方法 givens_method
import numpy as np
from numerical_analysis.eigenvalues_eigenvectors import givens_method

def main():
    A = np.array([[1, 1, 0.5], [1, 1, 0.25], [0.5, 0.25, 2]])
    T = givens_method(A)
    print(T)

if __name__ == '__main__':
    main()


## 4.Householder方法 householder_method
import numpy as np
from numerical_analysis.eigenvalues_eigenvectors import householder_method

def main():
    A = np.array([[1, 1, 0.5], [1, 1, 0.25], [0.5, 0.25, 2]])
    T = householder_method(A)
    print(T)

if __name__ == '__main__':
    main()


## 5.对称三对角矩阵的特征值计算 sturm_method
import numpy as np
from numerical_analysis.eigenvalues_eigenvectors import givens_method, sturm_method

def main():
    A = np.array([[1, 1, 0.5], [1, 1, 0.25], [0.5, 0.25, 2]])
    T = givens_method(A)
    lambd = sturm_method(T, (-1, 0, 2, 3))
    print(lambd)

if __name__ == '__main__':
    main()


## 6.LR算法 LR_method
import numpy as np
from numerical_analysis.eigenvalues_eigenvectors import LR_method

def main():
    A = np.array([[7, 3, 1], [3, 4, 2], [1, 2, 3]])
    lambd = LR_method(A, iteration=20)
    print(lambd)

if __name__ == '__main__':
    main()


## 7.QR算法 QR_method
import numpy as np
from numerical_analysis.eigenvalues_eigenvectors import QR_method

def main():
    A = np.array([[7, 3, 1], [3, 4, 2], [1, 2, 3]])
    lambd = QR_method(A, iteration=10)
    print(lambd)

if __name__ == '__main__':
    main()