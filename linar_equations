## 1.高斯消元法  guass
import numpy as np
from numerical_analysis.linar_equtions import guass

def main():
    A = np.array([[4,-1,0],[-1,4,-1],[0,-1,4]], dtype = np.float32)
    b = np.array([2,6,2], dtype = np.float32).reshape(3,1)
    x = guass(A, b)
    r = b-np.dot(A,x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 2.高斯若当消元法  guass_jordan
import numpy as np
from numerical_analysis.linar_equtions import guass_jordan

def main():
    A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]], dtype=np.float32)
    b = np.array([2, 6, 2], dtype=np.float32).reshape(3, 1)
    x = guass_jordan(A, b)
    r = b-np.dot(A,x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 3.Doolittle分解方法 doolittle_decomposition
import numpy as np
from numerical_analysis.linar_equtions import doolittle_decomposition

def main():
    A = np.array([[4,-1,0],[-1,4,-1],[0,-1,4]], dtype=np.float32)
    b = np.array([2,6,2], dtype=np.float32).reshape(3, 1)
    x = doolittle_decomposition(A, b)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 4.Crout分解方法 crout_decomposition
import numpy as np
from numerical_analysis.linar_equtions import crout_decomposition

def main():
    A = np.array([[4,-1,0],[-1,4,-1],[0,-1,4]], dtype=np.float32)
    b = np.array([2,6,2], dtype=np.float32).reshape(3, 1)
    x = crout_decomposition(A, b)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 5.Cholesky分解方法 cholesky_decomposition
import numpy as np
from numerical_analysis.linar_equtions import cholesky_decomposition

def main():
    A = np.array([[1,2,1,-3],[2,5,0,-5],[1,0,14,1],[-3,-5,1,15]], dtype=np.float32)
    b = np.array([1,2,16,8], dtype=np.float32).reshape(4, 1)
    x = cholesky_decomposition(A, b)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 6.改进的Cholesky分解方法 improved_cholesky_decomposition
import numpy as np
from numerical_analysis.linar_equtions import improved_cholesky_decomposition

def main():
    A = np.array([[1,2,1,-3],[2,5,0,-5],[1,0,14,1],[-3,-5,1,15]], dtype=np.float32)
    b = np.array([1,2,16,8], dtype=np.float32).reshape(4, 1)
    x = improved_cholesky_decomposition(A, b)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 7.追赶法 catch_up
import numpy as np
from numerical_analysis.linar_equtions import catch_up

def main():
    A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]], dtype=np.float32)
    b = np.array([2, 6, 2], dtype=np.float32).reshape(3, 1)
    x = catch_up(A, b)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 8.病态问题检验 Cond
import numpy as np
from numerical_analysis.linar_equtions import Cond

def main():
    A = np.array([[2, 6], [2, 6.00001]], dtype=np.float32)
    b = np.array([8, 8.00001], dtype=np.float32).reshape(2, 1)
    c = Cond(A)
    print(str(c))

if __name__ == '__main__':
    main()


## 9.Jacobi迭代 jacobi_iterative
import numpy as np
from numerical_analysis.linar_equtions import jacobi_iterative

def main():
    A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]], dtype=np.float32)
    b = np.array([2, 6, 2], dtype=np.float32).reshape(3, 1)
    x_initial = np.array([0, 0, 0], dtype=np.float32).reshape(3, 1)
    x = jacobi_iterative(A, b, x_initial)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()

## 10.Gauss_Seidel迭代 gauss_seidel_iterative
import numpy as np
from numerical_analysis.linar_equtions import gauss_seidel_iterative

def main():
    A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]], dtype=np.float32)
    b = np.array([2, 6, 2], dtype=np.float32).reshape(3, 1)
    x_initial = np.array([0, 0, 0], dtype=np.float32).reshape(3, 1)
    x = gauss_seidel_iterative(A, b, x_initial)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 11.超松弛迭代法 SOR_iterative
import numpy as np
from numerical_analysis.linar_equtions import SOR_iterative

def main():
    A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]], dtype=np.float32)
    b = np.array([2, 6, 2], dtype=np.float32).reshape(3, 1)
    x_initial = np.array([0, 0, 0], dtype=np.float32).reshape(3, 1)
    x = SOR_iterative(A, b, x_initial, w=1.2)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 12.最速下降法 steepest_descent
import numpy as np
from numerical_analysis.linar_equtions import steepest_descent

def main():
    A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]], dtype=np.float32)
    b = np.array([2, 6, 2], dtype=np.float32).reshape(3, 1)
    x_initial = np.array([0, 0, 0], dtype=np.float32).reshape(3, 1)
    x = steepest_descent(A, b, x_initial)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()


## 13.共轭梯度法 conjugate_gradient
import numpy as np
from numerical_analysis.linar_equtions import conjugate_gradient

def main():
    A = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]], dtype=np.float32)
    b = np.array([2, 6, 2], dtype=np.float32).reshape(3, 1)
    x_initial = np.array([0, 0, 0], dtype=np.float32).reshape(3, 1)
    x = conjugate_gradient(A, b, x_initial)
    r = b - np.dot(A, x)
    print(str(x))
    print(str(r))

if __name__ == '__main__':
    main()